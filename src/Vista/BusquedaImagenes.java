/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Control.ControlCategoria;
import Control.ControlComentarioImagen;
import Control.ControlCuenta;
import Control.ControlImagen;
import Modelo.Categoria;
import Modelo.ComentarioImagen;
import Modelo.CuentaUsuario;
import Modelo.Imagen;
import java.awt.Image;
import java.awt.TextField;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Mateo
 */
public class BusquedaImagenes extends javax.swing.JFrame {

    Principal GUIprincipal5;
    FileOutputStream salida;

    LinkedList<Imagen> imagenesGuardadas;
    LinkedList<Imagen> ImagenesPalabraBuscar;
    LinkedList<Categoria> categoriasImagenes;
    LinkedList<Imagen> imagenesCategoriasBuscar;
    LinkedList<ComentarioImagen> comentariosImagenes;

    String nombreUsuarioBusquedadI;
    String fechaPublicacionC;
    String Pclave;
    String categoriaSeleccionada;

    int contador;
    int contadorImagen;
    int contadorComentario;
    int contadorDescarga;

    int entrar;
    int entrar2;
    int parar;

    boolean cambio = true;

    //*******************************************************
    public BusquedaImagenes(String NombreUsuarioBI) {

        initComponents();
        this.setLocationRelativeTo(this);
        nombreUsuarioBusquedadI = NombreUsuarioBI;

        imagenesGuardadas = new LinkedList<>();
        ImagenesPalabraBuscar = new LinkedList<>();
        categoriasImagenes = new LinkedList<>();
        imagenesCategoriasBuscar = new LinkedList<>();
        comentariosImagenes = new LinkedList<>();

        contador = 0;
        contadorImagen = 1;
        contadorComentario = 0;
        contadorDescarga = 0;

        Pclave = "";
        categoriaSeleccionada = "Categorias";
        entrar = 0;
        entrar2 = 0;
        parar = 0;
        TextComentario.setEnabled(false);

        TraerImagenes();
        TraerCategorias();
        TraerCuenta();

        //****************************************************************************
        if (cambio) {

            MostrarImagenes();
            traerComentarios(imagenesGuardadas.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();
                ValidarBotonesComentario();
                // DerechaComentario.setEnabled(true);

            } else {

                //IzquierdaComentario.setEnabled(false);
                // DerechaComentario.setEnabled(false);
            }//Fin if

            jLabelContador.setText("/" + String.valueOf(imagenesGuardadas.size()));
            BotonIzquierda.setEnabled(false);
            Contador.setText(String.valueOf(contadorImagen));

            mostrar.setEnabled(false);
            cambio = false;

        }//Fin if

    }

    public BusquedaImagenes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelImagen = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Contador = new javax.swing.JTextField();
        jLabelContador = new javax.swing.JLabel();
        BotonIzquierda = new javax.swing.JButton();
        BotonDerecha = new javax.swing.JButton();
        categorias = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabelPerfilCuenta = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        comentario = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DescripcionI = new javax.swing.JTextArea();
        CategoriaI = new javax.swing.JTextField();
        FormatoI = new javax.swing.JTextField();
        NombreI = new javax.swing.JTextField();
        ResolucionI = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        FechaSubida = new javax.swing.JTextField();
        jLabelFoto = new javax.swing.JLabel();
        jLabelNombreU = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        mostrar = new javax.swing.JButton();
        pClave = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TextComentario = new javax.swing.JTextArea();
        editarC = new javax.swing.JButton();
        eliminarC = new javax.swing.JButton();
        guardarC = new javax.swing.JButton();
        IzquierdaComentario = new javax.swing.JButton();
        DerechaComentario = new javax.swing.JButton();
        jLabelFotoC = new javax.swing.JLabel();
        NUsuario = new javax.swing.JLabel();
        fPublicacion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelImagen.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Contador.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabelContador.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelContador.setText("/0");

        BotonIzquierda.setText("<");
        BotonIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonIzquierdaActionPerformed(evt);
            }
        });

        BotonDerecha.setText(">");
        BotonDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDerechaActionPerformed(evt);
            }
        });

        categorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Categorias" }));

        jLabelPerfilCuenta.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        comentario.setColumns(20);
        comentario.setRows(5);
        jScrollPane2.setViewportView(comentario);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Formato Imagen");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Nombre Imagen");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Resolución");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Categoría");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Descripción");

        DescripcionI.setColumns(20);
        DescripcionI.setRows(5);
        DescripcionI.setEnabled(false);
        jScrollPane3.setViewportView(DescripcionI);

        CategoriaI.setEnabled(false);

        FormatoI.setEnabled(false);

        NombreI.setEnabled(false);

        ResolucionI.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Fecha subida");

        FechaSubida.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                        .addComponent(FormatoI, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NombreI, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ResolucionI, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CategoriaI, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FechaSubida, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(FormatoI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(NombreI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(ResolucionI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FechaSubida, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(CategoriaI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabelFoto.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelNombreU.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelNombreU.setText("Nombre Usuario");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("DESCARGAR IMAGEN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Buscar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Regresar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Agregar comentario");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        mostrar.setText("Mostrar imágenes");
        mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Máximo 150 caracteres para el comentario");

        TextComentario.setColumns(20);
        TextComentario.setRows(5);
        jScrollPane4.setViewportView(TextComentario);

        editarC.setText("Editar");
        editarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarCActionPerformed(evt);
            }
        });

        eliminarC.setText("Eliminar");
        eliminarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarCActionPerformed(evt);
            }
        });

        guardarC.setText("Guardar");
        guardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCActionPerformed(evt);
            }
        });

        IzquierdaComentario.setText("<");
        IzquierdaComentario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IzquierdaComentarioActionPerformed(evt);
            }
        });

        DerechaComentario.setText(">");
        DerechaComentario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DerechaComentarioActionPerformed(evt);
            }
        });

        jLabelFotoC.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NUsuario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        NUsuario.setText("NombreUsuario");

        fPublicacion.setText("FechaPublicación");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jLabelFotoC, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(NUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fPublicacion))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(IzquierdaComentario)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(DerechaComentario)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editarC)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(eliminarC)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(guardarC))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NUsuario)
                            .addComponent(fPublicacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelFotoC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 32, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarC)
                    .addComponent(editarC)
                    .addComponent(eliminarC)
                    .addComponent(IzquierdaComentario)
                    .addComponent(DerechaComentario))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(categorias, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pClave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mostrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(163, 163, 163)
                        .addComponent(Contador, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelContador)
                        .addGap(31, 31, 31)
                        .addComponent(BotonIzquierda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonDerecha))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabelPerfilCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton6))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelNombreU)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jSeparator3)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonDerecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotonIzquierda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Contador, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelContador)
                    .addComponent(categorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(mostrar)
                    .addComponent(pClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPerfilCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNombreU))
                        .addGap(11, 11, 11)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1074, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        Calendar c1 = Calendar.getInstance();

        ControlComentarioImagen CcomentarioI = new ControlComentarioImagen();

        String PkImagen = "";

        //Condición para saber en que método de búsqueda está. De esa forma, 
        //Se aplica el comentario a la imagen adecuadamente.
        if (Pclave.equals("") && categoriaSeleccionada.equals("Categorias")) {

            PkImagen = imagenesGuardadas.get(contador).getIdImagen();

        } else if (!"".equals(Pclave)) {

            PkImagen = ImagenesPalabraBuscar.get(contador).getIdImagen();

        } else if (!"Categorias".equals(categoriaSeleccionada)) {

            PkImagen = imagenesCategoriasBuscar.get(contador).getIdImagen();

        }//Fin if

        //*************************************************************************************
        //Se obtiene el año, mes y día en el momento en que se crea la cuenta
        String Dia = Integer.toString(c1.get(Calendar.DATE));
        String Mes = Integer.toString(c1.get(Calendar.MONTH) + 1);
        String Año = Integer.toString(c1.get(Calendar.YEAR));

        //Se obtiene la hora, los minutos y los segundos en el momento en que se inserta el comentario
        String Hora = Integer.toString(c1.get(Calendar.HOUR));
        String Minutos = Integer.toString(c1.get(Calendar.MINUTE));
        String Segundos = Integer.toString(c1.get(Calendar.SECOND));

        if (Segundos.length() == 1) {

            Segundos = "0" + Segundos;

        }//Fin if

        fechaPublicacionC = Año.substring(2, 4) + "-0" + Mes + "-" + Dia + " " + Hora + ":" + Minutos + ":" + Segundos;
        String descripcionComentario = comentario.getText();

        if (descripcionComentario.equals("")) {

            JOptionPane.showMessageDialog(null, "Añadir una descripción al comentario.", "Advertencia", JOptionPane.ERROR_MESSAGE);

        } else {

            //Se crea el objeto comentarioImagen
            ComentarioImagen CI = new ComentarioImagen(fechaPublicacionC, descripcionComentario);

            //*************************************************************************************
            boolean t = CcomentarioI.InsertarComentario(PkImagen, nombreUsuarioBusquedadI, CI);

            if (t) {

                JOptionPane.showMessageDialog(null, "Comentario agregado.");
                comentario.setText("");

            }//Fin if

        }//Fin if principal

    }//GEN-LAST:event_jButton6ActionPerformed

    private void BotonDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDerechaActionPerformed

        TextComentario.setEnabled(false);

        if (Pclave.equals("") && categoriaSeleccionada.equals("Categorias")) {

            if (contador < (imagenesGuardadas.size() - 1)) {

                contador = 1 + contador;
                MostrarImagenes();
                BotonIzquierda.setEnabled(true);

                //******************************************************************
                contadorImagen = 1 + contadorImagen;
                Contador.setText(String.valueOf(contadorImagen));

                //******************************************************************
                //Método que actualiza los comentarios de la imagen cada vez que se haga un cambio
                //de búsqueda
                ActualizarComentariosGUI();

            } else {

                //Se desactiva el botón derecha cuando se llegue al máximo de imágenes guardadas
                //en el linkedList
                BotonDerecha.setEnabled(false);

            }//Fin if

        } else if (!"".equals(Pclave)) {

            if (contador < (ImagenesPalabraBuscar.size() - 1)) {

                contador = 1 + contador;
                MostrarImagenesPalabraBusquedad();
                BotonIzquierda.setEnabled(true);
                ActualizarComentariosGUIPalabraClave();

                //******************************************************************
                contadorImagen = 1 + contadorImagen;
                Contador.setText(String.valueOf(contadorImagen));

            } else {

                BotonDerecha.setEnabled(false);

            }//Fin if

        } else if (!"Categorias".equals(categoriaSeleccionada)) {

            if (contador < (imagenesCategoriasBuscar.size() - 1)) {

                contador = 1 + contador;
                MostrarImagenesCategoriaSeleccionada();
                ActualizarComentariosGUICategoriaBusqueda();
                BotonIzquierda.setEnabled(true);

                //******************************************************************
                contadorImagen = 1 + contadorImagen;
                Contador.setText(String.valueOf(contadorImagen));

            } else {

                BotonDerecha.setEnabled(false);

            }//Fin if

        }//Fin if

    }//GEN-LAST:event_BotonDerechaActionPerformed

    private void BotonIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonIzquierdaActionPerformed

        TextComentario.setEnabled(false);

        if (Pclave.equals("") && categoriaSeleccionada.equals("Categorias")) {

            if (contador > 0) {

                contador = contador - 1;
                MostrarImagenes();
                BotonDerecha.setEnabled(true);

                //******************************************************************
                contadorImagen = contadorImagen - 1;
                Contador.setText(String.valueOf(contadorImagen));

                //******************************************************************
                //Método que actualiza los comentarios de la imagen cada vez que se haga un cambio
                //de búsqueda
                ActualizarComentariosGUI();

                //******************************************************************
            } else if (contador == 0) {

                BotonIzquierda.setEnabled(false);

            }//Fin if

        } else if (!"".equals(Pclave)) {

            if (contador > 0) {

                contador = contador - 1;
                MostrarImagenesPalabraBusquedad();
                ActualizarComentariosGUIPalabraClave();
                BotonDerecha.setEnabled(true);

                //******************************************************************
                contadorImagen = contadorImagen - 1;
                Contador.setText(String.valueOf(contadorImagen));

            } else if (contador == 0) {

                BotonIzquierda.setEnabled(false);

            }//Fin if

        }//Fin if

        if (!"Categorias".equals(categoriaSeleccionada)) {

            if (contador > 0) {

                contador = contador - 1;
                MostrarImagenesCategoriaSeleccionada();
                ActualizarComentariosGUICategoriaBusqueda();
                BotonDerecha.setEnabled(true);

                //******************************************************************
                contadorImagen = contadorImagen - 1;
                Contador.setText(String.valueOf(contadorImagen));

            } else if (contador == 0) {

                BotonIzquierda.setEnabled(false);

            }//Fin if

        }//Fin if

    }//GEN-LAST:event_BotonIzquierdaActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        GUIprincipal5 = new Principal();
        GUIprincipal5.setNombreUsuarioPrincipal(nombreUsuarioBusquedadI);
        GUIprincipal5.show();
        this.dispose();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarActionPerformed

        Pclave = "";
        categoriaSeleccionada = "Categorias";
        MostrarImagenes();
        //Se reinicia las variables que traen los datos de cada imagen que fueron asignados a los linkedList
        contador = 0;
        contadorImagen = 1;

        jLabelContador.setText("/" + String.valueOf(imagenesGuardadas.size()));
        BotonIzquierda.setEnabled(false);
        Contador.setText(String.valueOf(contadorImagen));

        //Se actualizan los botones
        BotonIzquierda.setEnabled(false);
        BotonDerecha.setEnabled(true);
        mostrar.setEnabled(false);

    }//GEN-LAST:event_mostrarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        TextComentario.setEnabled(false);

        //***************************************************************************************************************************
        Pclave = pClave.getText();
        categoriaSeleccionada = categorias.getSelectedItem().toString();

        if (Pclave.equals("") && categoriaSeleccionada.equals("Categorias")) {

            JOptionPane.showMessageDialog(null, "Seleccionar un método de búsqueda." + "\n\nMétodos:" + "\n1.Buscar por palabra clave." + "\n2.Buscar por categorías.", "Advertencia", JOptionPane.ERROR_MESSAGE);

        } else if (!"".equals(Pclave) && !"Categorias".equals(categoriaSeleccionada)) {

            JOptionPane.showMessageDialog(null, "Seleccionar un sólo método de búsqueda." + "\n\nMétodos:" + "\n1.Buscar por palabra clave." + "\n2.Buscar por categorías.", "Advertencia", JOptionPane.ERROR_MESSAGE);
            pClave.setText("");
            categorias.setSelectedItem("Categorias");

        } else {

            if (!"".equals(Pclave)) {

                //Es para limpiar el linkedList cada vez que se genere una búsqueda
                if (ImagenesPalabraBuscar.isEmpty() == false) {

                    ImagenesPalabraBuscar.clear();

                }//Fin if

                ImagenesPalabraclave();

                //Si por medio de la palabra clave ha encontrado resultados, el linkedList se llenará
                //Si no se llena, se arroja un advertencia donde no se encontro imágenes con esa palabra
                //Y por ende no ejecuta esta condición
                //***************************************************************************************************************
                if (ImagenesPalabraBuscar.isEmpty() == false) {

                    //Se reinicia las variables que traen los datos de cada imagen que fueron asignados a los linkedList
                    contador = 0;
                    contadorImagen = 1;

                    MostrarImagenesPalabraBusquedad();
                    ActualizarComentariosGUIPalabraClave();

                    jLabelContador.setText("/" + String.valueOf(ImagenesPalabraBuscar.size()));
                    BotonIzquierda.setEnabled(false);
                    Contador.setText(String.valueOf(contadorImagen));
                    mostrar.setEnabled(true);

                    //Se actualizan los botones
                    BotonIzquierda.setEnabled(false);
                    BotonDerecha.setEnabled(true);

                    categoriaSeleccionada = "Categorias";
                    pClave.setText("");

                } else {

                    Pclave = "";
                    //Se actualizan las variables
                    categoriaSeleccionada = "Categorias";
                    pClave.setText("");

                }//Fin if

            } else if (!"Categorias".equals(categoriaSeleccionada)) {

                if (imagenesCategoriasBuscar.isEmpty() == false) {

                    imagenesCategoriasBuscar.clear();

                }//Fin if

                ImagenesCategoriaBusquedad();

                //***************************************************************************************************************
                if (imagenesCategoriasBuscar.isEmpty() == false) {
                    //Se reinicia las variables que traen los datos de cada imagen que fueron asignados a los linkedList
                    contador = 0;
                    contadorImagen = 1;

                    MostrarImagenesCategoriaSeleccionada();
                    //Es importante invocar el método después de que se reinicie el contador general 
                    //Pues si se coloca antes, tomará el último valor del contador registrado
                    //Generando que salga error con el tamaño de algún linkedList al invocarse
                    //El método de actualizar los comentarios cuando la búsqueda es por categorías
                    ActualizarComentariosGUICategoriaBusqueda();

                    jLabelContador.setText("/" + String.valueOf(imagenesCategoriasBuscar.size()));
                    BotonIzquierda.setEnabled(false);
                    Contador.setText(String.valueOf(contadorImagen));
                    mostrar.setEnabled(true);

                    //Se actualizan los botones
                    BotonIzquierda.setEnabled(false);
                    BotonDerecha.setEnabled(true);

                    Pclave = "";
                    categorias.setSelectedItem("Categorias");

                } else {

                    categoriaSeleccionada = "Categorias";
                    //Se actualizan las variables
                    Pclave = "";
                    categorias.setSelectedItem("Categorias");

                }//Fin if

            }//Fin if

        }//Fin if principal

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if (Pclave.equals("") && categoriaSeleccionada.equals("Categorias")) {

            Descarga(imagenesGuardadas.get(contador).getImagenCuenta(), imagenesGuardadas.get(contador).getNombreImagen(), imagenesGuardadas.get(contador).getFormato_Imagen());

        } else if (!"".equals(Pclave)) {

            Descarga(ImagenesPalabraBuscar.get(contador).getImagenCuenta(), ImagenesPalabraBuscar.get(contador).getNombreImagen(), ImagenesPalabraBuscar.get(contador).getFormato_Imagen());

        } else if (!"Categorias".equals(categoriaSeleccionada)) {

            Descarga(imagenesCategoriasBuscar.get(contador).getImagenCuenta(), imagenesCategoriasBuscar.get(contador).getNombreImagen(), imagenesCategoriasBuscar.get(contador).getFormato_Imagen());

        }//Fin método

    }//GEN-LAST:event_jButton3ActionPerformed

    private void DerechaComentarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DerechaComentarioActionPerformed

        if (contadorComentario < (comentariosImagenes.size() - 1)) {

            contadorComentario = 1 + contadorComentario;
            CrearEspaciosComentarios();
            //IzquierdaComentario.setEnabled(true);

            ValidarBotonesComentario();

        } else {

            //DerechaComentario.setEnabled(false);
        }//Fin if

    }//GEN-LAST:event_DerechaComentarioActionPerformed

    private void IzquierdaComentarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IzquierdaComentarioActionPerformed

        if (contadorComentario > 0) {

            contadorComentario = contadorComentario - 1;
            CrearEspaciosComentarios();

            //DerechaComentario.setEnabled(true);
            ValidarBotonesComentario();

        } else if (contadorComentario == 0) {

            //IzquierdaComentario.setEnabled(false);
        }//Fin if

    }//GEN-LAST:event_IzquierdaComentarioActionPerformed

    private void editarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarCActionPerformed

        TextComentario.setEnabled(true);

    }//GEN-LAST:event_editarCActionPerformed

    private void guardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCActionPerformed

        int Respuesta = JOptionPane.showConfirmDialog(null, "¿Está seguro/a que desea editar el comentario?");

        if (Respuesta == 0) {

            ControlComentarioImagen cCimagen = new ControlComentarioImagen();

            Calendar c1 = Calendar.getInstance();

            String Dia = Integer.toString(c1.get(Calendar.DATE));
            String Mes = Integer.toString(c1.get(Calendar.MONTH) + 1);
            String Año = Integer.toString(c1.get(Calendar.YEAR));

            //Se obtiene la hora, los minutos y los segundos en el momento en que se inserta el comentario
            String Hora = Integer.toString(c1.get(Calendar.HOUR));
            String Minutos = Integer.toString(c1.get(Calendar.MINUTE));
            String Segundos = Integer.toString(c1.get(Calendar.SECOND));

            if (Segundos.length() == 1) {

                Segundos = "0" + Segundos;

            }//Fin if

            fechaPublicacionC = Año.substring(2, 4) + "-0" + Mes + "-" + Dia + " " + Hora + ":" + Minutos + ":" + Segundos;

            String actualizarComentario = TextComentario.getText();

            //Se actualizar el comentario también en el linkedList
            comentariosImagenes.get(contadorComentario).setDescrpcionImagen(actualizarComentario);
            comentariosImagenes.get(contadorComentario).setFechaPublicacion(fechaPublicacionC);

            ComentarioImagen Cimagen = new ComentarioImagen(fechaPublicacionC, actualizarComentario);

            boolean t = cCimagen.ModificarComentario(comentariosImagenes.get(contadorComentario).getIdComentario(), Cimagen);

            if (t) {

                JOptionPane.showMessageDialog(null, "Comentario modificado.");

            }//Fin if

        }//Fin if

    }//GEN-LAST:event_guardarCActionPerformed

    private void eliminarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarCActionPerformed

        int Respuesta = JOptionPane.showConfirmDialog(null, "¿Está seguro/a que desea eliminar el comentario?");

        if (Respuesta == 0) {

            ControlComentarioImagen cCimagen = new ControlComentarioImagen();

            boolean t = cCimagen.EliminarComentario(comentariosImagenes.get(contadorComentario).getIdComentario(), nombreUsuarioBusquedadI);

            if (t) {

                JOptionPane.showMessageDialog(null, "Comentario eliminado.");
                //Al momento de removerse el comentario en la BD también se remueve el objeto guardado en el linkedList
                comentariosImagenes.remove(contadorComentario);
                TextComentario.setText("");
                jLabelFotoC.setIcon(null);
                NUsuario.setText("");
                fPublicacion.setText("");

            }//Fin if

        }//Fin if

    }//GEN-LAST:event_eliminarCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BusquedaImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BusquedaImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BusquedaImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BusquedaImagenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BusquedaImagenes().setVisible(true);
            }
        });
    }

    public void TraerImagenes() {

        ControlImagen CI = new ControlImagen();

        //Devuelve un linkelist donde se encuentra guardado todos los datos de las imágenes de varias cuentas
        imagenesGuardadas = CI.BuscarImagenesGuardadas();

    }//Fin método

    public void MostrarImagenes() {

        FormatoI.setText(imagenesGuardadas.get(contador).getFormato_Imagen());
        NombreI.setText(imagenesGuardadas.get(contador).getNombreImagen());
        ResolucionI.setText(imagenesGuardadas.get(contador).getResolucion());
        CategoriaI.setText(imagenesGuardadas.get(contador).getCategoriaImagen());
        DescripcionI.setText(imagenesGuardadas.get(contador).getDescripcionImagen());
        FechaSubida.setText(imagenesGuardadas.get(contador).getFechaSubidaI());

        jLabelNombreU.setText(imagenesGuardadas.get(contador).getNombreUsuario());

        //Se pasa la imagen que está en un arreglo de byte para convertirlo en un icono
        ImageIcon icon = new ImageIcon(imagenesGuardadas.get(contador).getImagenCuenta());

        ImageIcon icon2 = new ImageIcon(imagenesGuardadas.get(contador).getImagenUsuario());

        //Después de que la imagen está convertida en icono entonces se procede a escalar el icono con el tamaño que conserva el label
        Icon icono = new ImageIcon(icon.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
        Icon icono2 = new ImageIcon(icon2.getImage().getScaledInstance(jLabelFoto.getWidth(), jLabelFoto.getHeight(), Image.SCALE_DEFAULT));

        //Se coloca la imagen con el tamaño que tiene en el label
        jLabelImagen.setIcon(icono);
        jLabelFoto.setIcon(icono2);

    }//Fin método

    public void MostrarImagenesPalabraBusquedad() {

        FormatoI.setText(ImagenesPalabraBuscar.get(contador).getFormato_Imagen());
        NombreI.setText(ImagenesPalabraBuscar.get(contador).getNombreImagen());
        ResolucionI.setText(ImagenesPalabraBuscar.get(contador).getResolucion());
        CategoriaI.setText(ImagenesPalabraBuscar.get(contador).getCategoriaImagen());
        DescripcionI.setText(ImagenesPalabraBuscar.get(contador).getDescripcionImagen());
        FechaSubida.setText(ImagenesPalabraBuscar.get(contador).getFechaSubidaI());

        jLabelNombreU.setText(ImagenesPalabraBuscar.get(contador).getNombreUsuario());

        //Se pasa la imagen que está en un arreglo de byte para convertirlo en un icono
        ImageIcon icon = new ImageIcon(ImagenesPalabraBuscar.get(contador).getImagenCuenta());

        ImageIcon icon2 = new ImageIcon(ImagenesPalabraBuscar.get(contador).getImagenUsuario());

        //Después de que la imagen está convertida en icono entonces se procede a escalar el icono con el tamaño que conserva el label
        Icon icono = new ImageIcon(icon.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
        Icon icono2 = new ImageIcon(icon2.getImage().getScaledInstance(jLabelFoto.getWidth(), jLabelFoto.getHeight(), Image.SCALE_DEFAULT));

        //Se coloca la imagen con el tamaño que tiene en el label
        jLabelImagen.setIcon(icono);
        jLabelFoto.setIcon(icono2);

    }//Fin método

    public void MostrarImagenesCategoriaSeleccionada() {

        FormatoI.setText(imagenesCategoriasBuscar.get(contador).getFormato_Imagen());
        NombreI.setText(imagenesCategoriasBuscar.get(contador).getNombreImagen());
        ResolucionI.setText(imagenesCategoriasBuscar.get(contador).getResolucion());
        CategoriaI.setText(imagenesCategoriasBuscar.get(contador).getCategoriaImagen());
        DescripcionI.setText(imagenesCategoriasBuscar.get(contador).getDescripcionImagen());
        FechaSubida.setText(imagenesCategoriasBuscar.get(contador).getFechaSubidaI());

        jLabelNombreU.setText(imagenesCategoriasBuscar.get(contador).getNombreUsuario());

        //Se pasa la imagen que está en un arreglo de byte para convertirlo en un icono
        ImageIcon icon = new ImageIcon(imagenesCategoriasBuscar.get(contador).getImagenCuenta());

        ImageIcon icon2 = new ImageIcon(imagenesCategoriasBuscar.get(contador).getImagenUsuario());

        //Después de que la imagen está convertida en icono entonces se procede a escalar el icono con el tamaño que conserva el label
        Icon icono = new ImageIcon(icon.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
        Icon icono2 = new ImageIcon(icon2.getImage().getScaledInstance(jLabelFoto.getWidth(), jLabelFoto.getHeight(), Image.SCALE_DEFAULT));

        //Se coloca la imagen con el tamaño que tiene en el label
        jLabelImagen.setIcon(icono);
        jLabelFoto.setIcon(icono2);

    }//Fin método

    public void ImagenesPalabraclave() {

        for (int i = 0; i < imagenesGuardadas.size(); i++) {

            if (imagenesGuardadas.get(i).getDescripcionImagen().contains(Pclave)) {

                ImagenesPalabraBuscar.add(imagenesGuardadas.get(i));

            }//Fin if

        }//Fin for

        if (ImagenesPalabraBuscar.isEmpty()) {

            JOptionPane.showMessageDialog(null, "Lo sentimos, no hay aciertos.", "Advertencia", JOptionPane.ERROR_MESSAGE);

        }//Fin if

    }//Fin método

    public void ImagenesCategoriaBusquedad() {

        for (int i = 0; i < imagenesGuardadas.size(); i++) {

            if (imagenesGuardadas.get(i).getCategoriaImagen().equals(categoriaSeleccionada)) {

                imagenesCategoriasBuscar.add(imagenesGuardadas.get(i));

            }//Fin if

        }//Fin for

        if (imagenesCategoriasBuscar.isEmpty()) {

            JOptionPane.showMessageDialog(null, "Lo sentimos, no hay aciertos.", "Advertencia", JOptionPane.ERROR_MESSAGE);

        }//Fin if

    }//Fin método

    public void TraerCategorias() {

        //Se trae todas las categorías pertenecientes a la BD
        ControlCategoria CC2 = new ControlCategoria();

        categoriasImagenes = CC2.LeerCategorias();

        for (int i = 0; i < categoriasImagenes.size(); i++) {

            categorias.addItem(categoriasImagenes.get(i).getNombreCategoria());

        }//Fin for

    }//Fin método

    public void TraerCuenta() {

        CuentaUsuario cUsuario = null;

        ControlCuenta Ccuenta = new ControlCuenta();

        cUsuario = Ccuenta.LeerCuenta(nombreUsuarioBusquedadI);

        byte[] img = cUsuario.getFotoPerfil();

        ImageIcon icon = new ImageIcon(img);

        //Después de que la imagen está convertida en icono entonces se procede a escalar el icono con el tamaño que conserva el label
        Icon icono = new ImageIcon(icon.getImage().getScaledInstance(jLabelPerfilCuenta.getWidth(), jLabelPerfilCuenta.getHeight(), Image.SCALE_DEFAULT));

        //Se coloca la imagen con el tamaño que tiene en el label
        jLabelPerfilCuenta.setIcon(icono);

    }//Fin método

    public void CrearEspaciosComentarios() {

        TextComentario.setText(comentariosImagenes.get(contadorComentario).getDescrpcionImagen());
        fPublicacion.setText(comentariosImagenes.get(contadorComentario).getFechaPublicacion());
        NUsuario.setText(comentariosImagenes.get(contadorComentario).getNombreUsuarioComentario());

        ImageIcon icon2 = new ImageIcon(comentariosImagenes.get(contadorComentario).getFotoUsuarioComentario());

        //Después de que la imagen está convertida en icono entonces se procede a escalar el icono con el tamaño que conserva el label
        Icon icono2 = new ImageIcon(icon2.getImage().getScaledInstance(jLabelFotoC.getWidth(), jLabelFotoC.getHeight(), Image.SCALE_DEFAULT));

        //Se coloca la imagen con el tamaño que tiene en el label
        jLabelFotoC.setIcon(icono2);

        TextComentario.setEnabled(false);

    }//Fin método

    //Trae los comentarios dependiendo de la imagen que esté observando el usuario
    public void traerComentarios(String IdContenido) {

        ControlComentarioImagen CcomentarioI = new ControlComentarioImagen();

        comentariosImagenes = CcomentarioI.TraerComentarios(IdContenido);

    }//Fin método

    public void LimpiarCamposComentarios() {

        //Se reinicia los datos cuando se cambia de imagen de búsqueda
        TextComentario.setText("");
        fPublicacion.setText("");
        NUsuario.setText("");
        //IzquierdaComentario.setEnabled(false);
        //DerechaComentario.setEnabled(true);
        contadorComentario = 0;

    }//Fin método

    public void ActualizarComentariosGUI() {

        //Borra todos los comentarios que hay en el linkedList
        //Cada vez que se cambia para buscar otra imagen
        //Siempre y cuando este linkedList tenga datos guardados
        if (comentariosImagenes.isEmpty() == false) {

            //Se limpia el anterior LinkedList que contenía comentarios de otra imagen
            comentariosImagenes.clear();
            LimpiarCamposComentarios();

            //Se vuelve a llamar para traer los comentarios de la imagen actual
            traerComentarios(imagenesGuardadas.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();

            }//Fin if

        } else {

            //Se vuelve a llamar para traer los comentarios de la imagen actual
            traerComentarios(imagenesGuardadas.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();

            }//Fin if

        }//Fin if principal

    }//Fin método

    public void ActualizarComentariosGUIPalabraClave() {

        //Borra todos los comentarios que hay en el linkedList
        //Cada vez que se cambia para buscar otra imagen
        //Siempre y cuando este linkedList tenga datos guardados
        if (comentariosImagenes.isEmpty() == false) {

            //Se limpia el anterior LinkedList que contenía comentarios de otra imagen
            comentariosImagenes.clear();
            LimpiarCamposComentarios();

            //Se vuelve a llamar para traer los comentarios de la imagen actual
            traerComentarios(ImagenesPalabraBuscar.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();

            }//Fin if

        } else {

            //Se vuelve a llamar para traer los comentarios de la imagen actual
            traerComentarios(ImagenesPalabraBuscar.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();

            }//Fin if

        }//Fin if principal

    }//Fin método

    public void ActualizarComentariosGUICategoriaBusqueda() {

        //Borra todos los comentarios que hay en el linkedList
        //Cada vez que se cambia para buscar otra imagen
        //Siempre y cuando este linkedList tenga datos guardados
        if (comentariosImagenes.isEmpty() == false) {

            //Se limpia el anterior LinkedList que contenía comentarios de otra imagen
            comentariosImagenes.clear();
            LimpiarCamposComentarios();

            //Se vuelve a llamar para traer los comentarios de la imagen actual
            traerComentarios(imagenesCategoriasBuscar.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();

            }//Fin if

        } else {

            //Se vuelve a llamar para traer los comentarios de la imagen actual
            traerComentarios(imagenesCategoriasBuscar.get(contador).getIdImagen());

            if (comentariosImagenes.isEmpty() == false) {

                CrearEspaciosComentarios();

            }//Fin if

        }//Fin if principal

    }//Fin método

    //Este método permite habilitar los botones que hay en la zona de comentario
    //Siempre y cuando los comentarios pertenezcan al usuario correspondiente
    public void ValidarBotonesComentario() {

        String nombreU = comentariosImagenes.get(contadorComentario).getNombreUsuarioComentario();

        if (nombreU.equals(nombreUsuarioBusquedadI)) {

            editarC.setEnabled(true);
            eliminarC.setEnabled(true);
            guardarC.setEnabled(true);

        } else {

            editarC.setEnabled(false);
            eliminarC.setEnabled(false);
            guardarC.setEnabled(false);

        }//Fin if

    }//Fin método

    public boolean DescargaImagenRuta(File archivo, byte[] imagen) {

        boolean mensaje = false;

        try {

            salida = new FileOutputStream(archivo);
            salida.write(imagen);

            mensaje = true;

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Fallo en la descarga: " + e, "Error", JOptionPane.ERROR_MESSAGE);

        }//Fin try

        return mensaje;

    }//Fin método

    public void Descarga(byte[] imagenes, String NombreImagen, String Formato) {

        String barra = File.separator;
        //Se establece la ruta desde la cuenta usuario del ordenador. Después, el escritorio, y por último, guarda en la carpeta imágenes.
        //String ubicacion = System.getProperty("user.home") + barra + "Desktop" + barra + "ImagenesDescarga" + barra;
        String ubicacion = System.getProperty("user.home") + barra + "Downloads" + barra;

        //El contador es para cambiar el nombre de la imagen cuando sea descargado
        //Pues si no se cambia y el usuario descargar la imagen varias veces
        //Entonces el sistema pedirá al sistema que ya se encuentra una imagen guardad con ese nombre
        contadorDescarga = 1 + contadorDescarga;

        String valor = Integer.toString(contadorDescarga);

        //Se establece la ruta donde se guardará la imagen
        File archivo2 = new File(ubicacion + NombreImagen + " (" + valor + ")" + "." + Formato.toLowerCase());

        boolean respuesta = DescargaImagenRuta(archivo2, imagenes);

        if (respuesta) {

            JOptionPane.showMessageDialog(null, "Imagen descargada exitosamente.");

        } else {

            JOptionPane.showMessageDialog(null, "Fallo en la descarga.", "Error", JOptionPane.ERROR_MESSAGE);

        }//Fin if

    }//Fin método


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonDerecha;
    private javax.swing.JButton BotonIzquierda;
    private javax.swing.JTextField CategoriaI;
    private javax.swing.JTextField Contador;
    private javax.swing.JButton DerechaComentario;
    private javax.swing.JTextArea DescripcionI;
    private javax.swing.JTextField FechaSubida;
    private javax.swing.JTextField FormatoI;
    private javax.swing.JButton IzquierdaComentario;
    private javax.swing.JLabel NUsuario;
    private javax.swing.JTextField NombreI;
    private javax.swing.JTextField ResolucionI;
    private javax.swing.JTextArea TextComentario;
    private javax.swing.JComboBox<String> categorias;
    private javax.swing.JTextArea comentario;
    private javax.swing.JButton editarC;
    private javax.swing.JButton eliminarC;
    private javax.swing.JLabel fPublicacion;
    private javax.swing.JButton guardarC;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelContador;
    private javax.swing.JLabel jLabelFoto;
    private javax.swing.JLabel jLabelFotoC;
    private javax.swing.JLabel jLabelImagen;
    private javax.swing.JLabel jLabelNombreU;
    private javax.swing.JLabel jLabelPerfilCuenta;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton mostrar;
    private javax.swing.JTextField pClave;
    // End of variables declaration//GEN-END:variables
}
